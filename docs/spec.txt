{}<X>   :    Function with name of 'X'.
()<I>   :    If index 'I' is re:zero, execute.
[]<I>   :    Loop while value at index 'I' is > 0.

! <I>   :    Boolean NOT the cell at index 'I'
r <I>   :    Set pointer to register 'I'.
$ <I>   :    Go to cell at index 'I'.
` <N>   :    Move the instruction pointer 'N' places. (e.g. -2, 5) (P.S. Keep in mind, arguments dont count as instructions, its JUST opcodes themselves so make sure to skip appropriately.)

^ <N>   :    Move up 'N' cells.
v <N>   :    Move down 'N' cells.

: <I>   :    Output raw value at 'I'.
. <I>   :    Output ASCII equivalent value at 'I'.
, <I>   :    Input a single char as ASCII value to 'I'.

# <X>   :    Execute function 'X'.

? <I>   :    Get value in current register and copy it to index 'I'.
& <I>   :    Set value in current register to value at index 'I'.

~ <I>   :    Push register 'I' to stack.
| <I>   :    Pop from stack to register 'I'.
\ <I>   :    Peek at top of stack and push to register 'I'.

= <N>   :    Set current cell to 'N'.
_ <N>   :    Set current register to 'N'.

+ <I>   :    Add 'N' to the current cell.
- <I>   :    Subtract 'N' from current cell.
* <I>   :    Multiply the current cell by 'N'.
/ <I>   :    Divide the current cell by 'N'.
% <I>   :    Divide the current cell by 'N' and store the remainder.